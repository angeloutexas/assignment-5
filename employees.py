"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Kaissa Doichev and Angelo Corridori, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: kjd2488
UT EID 2: aec4936
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings: int):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self._performance = INITIAL_PERFORMANCE
        self._happiness = INITIAL_HAPPINESS
        self._salary = salary

    @abstractmethod
    def work(self):
        pass

    @property
    def name(self) -> str:
        return self.__name

    @property
    def manager(self) -> str:
        return self.__manager
    
    @property
    def performance(self) -> int:
        return self._performance
    
    @performance.setter
    def performance(self, new_value: int):
        if new_value < 0:
            new_value = 0
        elif new_value > 100:
            new_value = 100
        self._performance = new_value
    
    @property
    def happiness(self) -> int:
        return self._happiness
    
    @happiness.setter
    def happiness(self, new_value: int):
        if new_value < 0:
            new_value = 0
        elif new_value > 100:
            new_value = 100
        self._happiness = new_value
    
    @property
    def salary(self) -> int:
        return self._salary

    @salary.setter
    def salary(self, new_value: int):
        if new_value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self._salary = new_value
    
    def interact(self, other):
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        if self.relationships[other.name] >= RELATIONSHIP_THRESHOLD:
            self.happiness = min(PERCENTAGE_MAX, self.happiness + 1)
        elif self.relationships[other.name] < RELATIONSHIP_THRESHOLD:
            if self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
                self.relationships[other.name] += 1
            else: 
                self.relationships[other.name] -= 1
                self.happiness =  max(PERCENTAGE_MIN, self.happiness - 1)

    def daily_expense(self):
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return f'{self.__name}\n\tSalary: ${self.salary}\n\tSavings: ${self.savings}\n\tHappiness: {self.happiness}%\n\tPerformance: {self.performance}%'

class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def __init__(self, name, manager, salary, savings):
        super().__init__(name, manager, salary, savings)

    def work(self):
        x = random.randint(-5, 5)
        self.performance += x
        if x < 0:
            self.happiness -= 1
            if self.manager in self.relationships:
                self.relationships[self.manager] -= 1
            else:
                self.relationships[self.manager] = -1  
        else:
            self.happiness += 1

        if self.manager in self.relationships:
            self.relationships[self.manager] += 1
        else:
            self.relationships[self.manager] = 1

class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def __init__(self, name, manager, salary, savings):
        super().__init__(name, manager, salary, savings)

    def work(self):
        x = random.randint(-15, 15)
        self.performance += x
        if x <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        if other == self.manager: 
            if self.happiness >= HAPPINESS_THRESHOLD and self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                if other.happiness >= HAPPINESS_THRESHOLD:
                    self.savings += MANAGER_BONUS
            elif self.happiness <= HAPPINESS_THRESHOLD:
                self.salary = self.salary / 2 
                self.happiness -= 5 
                if self.salary <= 0:
                    self.is_employed = None

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def __init__(self, name, manager, salary, savings):
        super().__init__(name, manager, salary, savings)

    def work(self):
        x = random.randint(-10, 10)
        self.performance += x 
        if x >= 0:
            self.happiness += 1

    def interact(self, other):
        if other is self.manager:
            if self.happiness >= HAPPINESS_THRESHOLD and self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                if other.happiness >= HAPPINESS_THRESHOLD: 
                    self.savings += MANAGER_BONUS
                else:
                    self.happiness -= 1